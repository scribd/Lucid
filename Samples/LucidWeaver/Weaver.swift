import Combine
import Foundation
import Lucid
import SwiftUI
import UIKit

// swiftlint:disable all
/// This file is generated by Weaver 1.0.7
/// DO NOT EDIT!

final class MainDependencyContainer {

    static var onFatalError: (String, StaticString, UInt) -> Never = { message, file, line in
        Swift.fatalError(message, file: file, line: line)
    }

    fileprivate static func fatalError(file: StaticString = #file, line: UInt = #line) -> Never {
        onFatalError("Invalid memory graph. This is never suppose to happen. Please file a ticket at https://github.com/scribd/Weaver", file, line)
    }

    private typealias ParametersCopier = (MainDependencyContainer) -> Void
    private typealias Builder<T> = (ParametersCopier?) -> T

    private func builder<T>(_ value: T) -> Builder<T> {
        return { [weak self] copyParameters in
            guard let self = self else {
                MainDependencyContainer.fatalError()
            }
            copyParameters?(self)
            return value
        }
    }

    private func weakOptionalBuilder<T>(_ value: Optional<T>) -> Builder<Optional<T>> where T: AnyObject {
        return { [weak value] _ in value }
    }

    private func weakBuilder<T>(_ value: T) -> Builder<T> where T: AnyObject {
        return { [weak self, weak value] copyParameters in
            guard let self = self, let value = value else {
                MainDependencyContainer.fatalError()
            }
            copyParameters?(self)
            return value
        }
    }

    private func lazyBuilder<T>(_ builder: @escaping Builder<T>) -> Builder<T> {
        var _value: T?
        return { copyParameters in
            if let value = _value {
                return value
            }
            let value = builder(copyParameters)
            _value = value
            return value
        }
    }

    private func weakLazyBuilder<T>(_ builder: @escaping Builder<T>) -> Builder<T> where T: AnyObject {
        weak var _value: T?
        return { copyParameters in
            if let value = _value {
                return value
            }
            let value = builder(copyParameters)
            _value = value
            return value
        }
    }

    private static func fatalBuilder<T>() -> Builder<T> {
        return { _ in
            MainDependencyContainer.fatalError()
        }
    }

    private var builders = Dictionary<String, Any>()
    private func getBuilder<T>(for name: String, type _: T.Type) -> Builder<T> {
        guard let builder = builders[name] as? Builder<T> else {
            return MainDependencyContainer.fatalBuilder()
        }
        return builder
    }

    private static var _dynamicResolvers = [Any]()
    private static var _dynamicResolversLock = NSRecursiveLock()

    fileprivate static func _popDynamicResolver<Resolver>(_ resolverType: Resolver.Type) -> Resolver {
        guard let dynamicResolver = _dynamicResolvers.removeFirst() as? Resolver else {
            MainDependencyContainer.fatalError()
        }
        return dynamicResolver
    }

    static func _pushDynamicResolver<Resolver>(_ resolver: Resolver) {
        _dynamicResolvers.append(resolver)
    }

    enum Scope {
        case transient
        case container
        case weak
        case lazy
    }

    enum Platform {
        case OSX
        case macOS
        case iOS
        case watchOS
        case tvOS
    }

    enum DependencyKind {
        case registration
        case reference
        case parameter
    }

    var controller_35f3b1765c3e413b9aebf35708866b4d430e9ee4: MovieDetailController {
        return getBuilder(
            for: "controller_35f3b1765c3e413b9aebf35708866b4d430e9ee4",
            type: MovieDetailController.self
        )(nil)
    }

    var controller_b4f15911de1d23192220247df39643ae6375cab3: MovieListController {
        return getBuilder(
            for: "controller_b4f15911de1d23192220247df39643ae6375cab3",
            type: MovieListController.self
        )(nil)
    }

    var coreManagers: MovieCoreManagerProviding {
        return getBuilder(for: "coreManagers", type: MovieCoreManagerProviding.self)(nil)
    }

    var imageManager: ImageManager {
        return getBuilder(for: "imageManager", type: ImageManager.self)(nil)
    }

    var managers: MovieCoreManagerProviding {
        return getBuilder(for: "managers", type: MovieCoreManagerProviding.self)(nil)
    }

    var movieDBClient: MovieDBClient {
        return getBuilder(for: "movieDBClient", type: MovieDBClient.self)(nil)
    }

    func movieDetail(viewModel: MovieDetailViewModel) -> MovieDetail {
        let builder: Builder<MovieDetail> = getBuilder(for: "movieDetail", type: MovieDetail.self)
        return builder { (_self) in _self.builders["viewModel"] = _self.builder(viewModel) }
    }

    var movieList: MovieList {
        return getBuilder(for: "movieList", type: MovieList.self)(nil)
    }

    var movieManager: MovieManager {
        return getBuilder(for: "movieManager", type: MovieManager.self)(nil)
    }

    var viewModel: MovieDetailViewModel {
        return getBuilder(for: "viewModel", type: MovieDetailViewModel.self)(nil)
    }

    fileprivate init() {
    }

    fileprivate func imageManagerDependencyResolver() -> ImageManagerDependencyResolver {
        let _self = MainDependencyContainer()
        _self.builders["movieDBClient"] = lazyBuilder { [weak _self] (_: Optional<ParametersCopier>) -> MovieDBClient in
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            return ImageManager.makeMovieDBClient(_self as MovieDBClientInputDependencyResolver)
        }
        _ = _self.getBuilder(for: "movieDBClient", type: MovieDBClient.self)(nil)
        MainDependencyContainer._pushDynamicResolver({ _self.movieDBClient })
        return _self
    }

    static func imageManagerDependencyResolver() -> ImageManagerDependencyResolver {
        let _self = MainDependencyContainer().imageManagerDependencyResolver()
        return _self
    }

    private func lucidWeaverAppDependencyResolver() -> LucidWeaverAppDependencyResolver {
        let _self = MainDependencyContainer()
        _self.builders["movieDBClient"] = lazyBuilder { (_: Optional<ParametersCopier>) -> MovieDBClient in return MovieDBClient() }
        _self.builders["managers"] = lazyBuilder { [weak _self] (_: Optional<ParametersCopier>) -> MovieCoreManagerProviding in
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            return CoreManagerContainer.make(_self as MovieCoreManagerProvidingInputDependencyResolver)
        }
        _self.builders["movieList"] = { [weak _self] (_: Optional<ParametersCopier>) -> MovieList in
            defer { MainDependencyContainer._dynamicResolversLock.unlock() }
            MainDependencyContainer._dynamicResolversLock.lock()
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            let __self = _self.movieListDependencyResolver()
            return MovieList(injecting: __self)
        }
        _self.builders["imageManager"] = lazyBuilder { [weak _self] (_: Optional<ParametersCopier>) -> ImageManager in
            defer { MainDependencyContainer._dynamicResolversLock.unlock() }
            MainDependencyContainer._dynamicResolversLock.lock()
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            let __self = _self.imageManagerDependencyResolver()
            return ImageManager(injecting: __self)
        }
        _self.builders["coreManagers"] = _self.builder(_self.managers)
        _self.builders["managers"] = _self.builder(_self.managers)
        _ = _self.getBuilder(for: "movieDBClient", type: MovieDBClient.self)(nil)
        _ = _self.getBuilder(for: "managers", type: MovieCoreManagerProviding.self)(nil)
        _ = _self.getBuilder(for: "imageManager", type: ImageManager.self)(nil)
        MainDependencyContainer._pushDynamicResolver({ _self.movieDBClient })
        MainDependencyContainer._pushDynamicResolver({ _self.managers })
        MainDependencyContainer._pushDynamicResolver({ _self.movieList })
        MainDependencyContainer._pushDynamicResolver({ _self.imageManager })
        return _self
    }

    static func lucidWeaverAppDependencyResolver() -> LucidWeaverAppDependencyResolver {
        let _self = MainDependencyContainer().lucidWeaverAppDependencyResolver()
        return _self
    }

    private func movieDetailControllerDependencyResolver() -> MovieDetailControllerDependencyResolver {
        let _self = MainDependencyContainer()
        _self.builders["movieManager"] = lazyBuilder { [weak _self] (_: Optional<ParametersCopier>) -> MovieManager in
            defer { MainDependencyContainer._dynamicResolversLock.unlock() }
            MainDependencyContainer._dynamicResolversLock.lock()
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            let __self = _self.movieManagerDependencyResolver()
            return MovieManager(injecting: __self)
        }
        _self.builders["coreManagers"] = _self.builder(managers)
        _self.builders["managers"] = _self.builder(managers)
        _ = _self.getBuilder(for: "movieManager", type: MovieManager.self)(nil)
        MainDependencyContainer._pushDynamicResolver({ _self.movieManager })
        return _self
    }

    static func movieDetailControllerDependencyResolver() -> MovieDetailControllerDependencyResolver {
        let _self = MainDependencyContainer().movieDetailControllerDependencyResolver()
        return _self
    }

    private func movieDetailDependencyResolver() -> MovieDetailDependencyResolverProxy {
        let _self = MainDependencyContainer()
        _self.builders["controller_35f3b1765c3e413b9aebf35708866b4d430e9ee4"] = lazyBuilder { [weak _self] (_: Optional<ParametersCopier>) -> MovieDetailController in
            defer { MainDependencyContainer._dynamicResolversLock.unlock() }
            MainDependencyContainer._dynamicResolversLock.lock()
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            let __self = _self.movieDetailControllerDependencyResolver()
            return MovieDetailController(injecting: __self)
        }
        _self.builders["coreManagers"] = _self.builder(managers)
        _self.builders["managers"] = _self.builder(managers)
        _ = _self.getBuilder(
            for: "controller_35f3b1765c3e413b9aebf35708866b4d430e9ee4",
            type: MovieDetailController.self
        )(nil)
        MainDependencyContainer._pushDynamicResolver({ _self.controller_35f3b1765c3e413b9aebf35708866b4d430e9ee4 })
        return MovieDetailDependencyResolverProxy(_self)
    }

    private func movieListControllerDependencyResolver() -> MovieListControllerDependencyResolver {
        let _self = MainDependencyContainer()
        _self.builders["movieManager"] = lazyBuilder { [weak _self] (_: Optional<ParametersCopier>) -> MovieManager in
            defer { MainDependencyContainer._dynamicResolversLock.unlock() }
            MainDependencyContainer._dynamicResolversLock.lock()
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            let __self = _self.movieManagerDependencyResolver()
            return MovieManager(injecting: __self)
        }
        _self.builders["coreManagers"] = _self.builder(managers)
        _self.builders["managers"] = _self.builder(managers)
        _self.builders["imageManager"] = _self.builder(imageManager)
        _ = _self.getBuilder(for: "movieManager", type: MovieManager.self)(nil)
        MainDependencyContainer._pushDynamicResolver({ _self.movieManager })
        MainDependencyContainer._pushDynamicResolver({ _self.imageManager })
        return _self
    }

    private func movieListDependencyResolver() -> MovieListDependencyResolverProxy {
        let _self = MainDependencyContainer()
        _self.builders["controller_b4f15911de1d23192220247df39643ae6375cab3"] = lazyBuilder { [weak _self] (_: Optional<ParametersCopier>) -> MovieListController in
            defer { MainDependencyContainer._dynamicResolversLock.unlock() }
            MainDependencyContainer._dynamicResolversLock.lock()
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            let __self = _self.movieListControllerDependencyResolver()
            return MovieListController(injecting: __self)
        }
        _self.builders["movieDetail"] = { [weak _self] (copyParameters: Optional<ParametersCopier>) -> MovieDetail in
            defer { MainDependencyContainer._dynamicResolversLock.unlock() }
            MainDependencyContainer._dynamicResolversLock.lock()
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            let __self = _self.movieDetailDependencyResolver()
            copyParameters?(__self.value as! MainDependencyContainer)
            return MovieDetail(injecting: __self)
        }
        _self.builders["coreManagers"] = _self.builder(managers)
        _self.builders["managers"] = _self.builder(managers)
        _self.builders["imageManager"] = _self.builder(imageManager)
        _ = _self.getBuilder(
            for: "controller_b4f15911de1d23192220247df39643ae6375cab3",
            type: MovieListController.self
        )(nil)
        MainDependencyContainer._pushDynamicResolver({ _self.controller_b4f15911de1d23192220247df39643ae6375cab3 })
        MainDependencyContainer._pushDynamicResolver(_self.movieDetail)
        return MovieListDependencyResolverProxy(_self)
    }

    static func movieListDependencyResolver() -> MovieListDependencyResolverProxy {
        let _self = MainDependencyContainer().movieListDependencyResolver()
        return _self
    }

    private func movieManagerDependencyResolver() -> MovieManagerDependencyResolver {
        let _self = MainDependencyContainer()
        _self.builders["coreManagers"] = _self.builder(managers)
        _self.builders["managers"] = _self.builder(managers)
        MainDependencyContainer._pushDynamicResolver({ _self.coreManagers })
        return _self
    }
}


protocol Controller_35f3b1765c3e413b9aebf35708866b4d430e9ee4_Resolver: AnyObject {
    var controller_35f3b1765c3e413b9aebf35708866b4d430e9ee4: MovieDetailController { get }
}

protocol Controller_b4f15911de1d23192220247df39643ae6375cab3_Resolver: AnyObject {
    var controller_b4f15911de1d23192220247df39643ae6375cab3: MovieListController { get }
}

protocol CoreManagersResolver: AnyObject {
    var coreManagers: MovieCoreManagerProviding { get }
}

protocol ImageManagerResolver: AnyObject {
    var imageManager: ImageManager { get }
}

protocol ManagersResolver: AnyObject {
    var managers: MovieCoreManagerProviding { get }
}

protocol MovieDBClientResolver: AnyObject {
    var movieDBClient: MovieDBClient { get }
}

protocol MovieDetailResolver: AnyObject {
    func movieDetail(viewModel: MovieDetailViewModel) -> MovieDetail
}

protocol MovieListResolver: AnyObject {
    var movieList: MovieList { get }
}

protocol MovieManagerResolver: AnyObject {
    var movieManager: MovieManager { get }
}

protocol ViewModelResolver: AnyObject {
    var viewModel: MovieDetailViewModel { get }
}

extension MainDependencyContainer: Controller_35f3b1765c3e413b9aebf35708866b4d430e9ee4_Resolver, Controller_b4f15911de1d23192220247df39643ae6375cab3_Resolver, CoreManagersResolver, ImageManagerResolver, ManagersResolver, MovieDBClientResolver, MovieDetailResolver, MovieListResolver, MovieManagerResolver, ViewModelResolver {
}

extension MainDependencyContainer {
}

typealias ImageManagerDependencyResolver = MovieDBClientResolver

typealias LucidWeaverAppDependencyResolver = MovieDBClientResolver & ManagersResolver & MovieListResolver & ImageManagerResolver

typealias MovieDetailControllerDependencyResolver = MovieManagerResolver

typealias MovieDetailInternalDependencyResolver = Controller_35f3b1765c3e413b9aebf35708866b4d430e9ee4_Resolver & ViewModelResolver

typealias MovieListControllerDependencyResolver = MovieManagerResolver & ImageManagerResolver

typealias MovieListInternalDependencyResolver = Controller_b4f15911de1d23192220247df39643ae6375cab3_Resolver & MovieDetailResolver

typealias MovieManagerDependencyResolver = CoreManagersResolver

typealias MovieCoreManagerProvidingInputDependencyResolver = ImageManagerResolver & ManagersResolver & MovieDBClientResolver & MovieListResolver

typealias MovieDBClientInputDependencyResolver = MovieDBClientResolver

struct MovieDetailDependencyResolverProxy {

    let value: MovieDetailInternalDependencyResolver

    init(_ value: MovieDetailInternalDependencyResolver) { self.value = value }

    var controller: MovieDetailController {
        return value.controller_35f3b1765c3e413b9aebf35708866b4d430e9ee4
    }

    var viewModel: MovieDetailViewModel {
        return value.viewModel
    }
}

typealias MovieDetailDependencyResolver = MovieDetailDependencyResolverProxy

struct MovieListDependencyResolverProxy {

    let value: MovieListInternalDependencyResolver

    init(_ value: MovieListInternalDependencyResolver) { self.value = value }

    var controller: MovieListController {
        return value.controller_b4f15911de1d23192220247df39643ae6375cab3
    }

    func movieDetail(viewModel: MovieDetailViewModel) -> MovieDetail { return value.movieDetail(viewModel: viewModel) }
}

typealias MovieListDependencyResolver = MovieListDependencyResolverProxy

@propertyWrapper
struct Weaver<ConcreteType, AbstractType> {

    typealias Resolver = () -> AbstractType
    let resolver = MainDependencyContainer._popDynamicResolver(Resolver.self)

    init(_ kind: MainDependencyContainer.DependencyKind,
         type: ConcreteType.Type,
         scope: MainDependencyContainer.Scope = .container,
         setter: Bool = false,
         escaping: Bool = false,
         builder: Optional<Any> = nil,
         objc: Bool = false,
         platforms: Array<MainDependencyContainer.Platform> = []) {
        // no-op
    }

    var wrappedValue: AbstractType {
        return resolver()
    }
}

extension Weaver where ConcreteType == Void {
    init(_ kind: MainDependencyContainer.DependencyKind,
         scope: MainDependencyContainer.Scope = .container,
         setter: Bool = false,
         escaping: Bool = false,
         builder: Optional<Any> = nil,
         objc: Bool = false,
         platforms: Array<MainDependencyContainer.Platform> = []) {
        // no-op
    }
}

@propertyWrapper
struct WeaverP1<ConcreteType, AbstractType, P1> {

    typealias Resolver = (P1) -> AbstractType
    let resolver = MainDependencyContainer._popDynamicResolver(Resolver.self)

    init(_ kind: MainDependencyContainer.DependencyKind,
         type: ConcreteType.Type,
         scope: MainDependencyContainer.Scope = .container,
         setter: Bool = false,
         escaping: Bool = false,
         builder: Optional<Any> = nil,
         objc: Bool = false,
         platforms: Array<MainDependencyContainer.Platform> = []) {
        // no-op
    }

    var wrappedValue: Resolver {
        return resolver
    }
}

extension WeaverP1 where ConcreteType == Void {
    init(_ kind: MainDependencyContainer.DependencyKind,
         scope: MainDependencyContainer.Scope = .container,
         setter: Bool = false,
         escaping: Bool = false,
         builder: Optional<Any> = nil,
         objc: Bool = false,
         platforms: Array<MainDependencyContainer.Platform> = []) {
        // no-op
    }
}
